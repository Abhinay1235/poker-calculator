{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","localStorage","clear","editBuyin","option","sPlayerSelected","state","selectedPlayer","sPlayers","players","sTotalInitialChipsTaken","parseInt","totalChipsTaken","length","alert","forEach","item","player_name","later_buyins","startChipCount","setState","setItem","JSON","stringify","startNewGame","sGameLocation","gameLocation","sStartChipCount","sChipValue","parseFloat","chipValue","sGameDetails","date","toString","visibleSection","addNewPlayer","sNewPlayerName","newPlayerName","sPlayersList","playersList","sPlayerInfo","initial_chips","final_count","chipsWon","indexOf","push","deletePlayer","sDeletePlayerName","i","splice","sPlayersListFiltered","filter","calculatePayouts","profitClub","loosersClub","stotalFinalChipsGiven","totalFinalChipsGiven","player","sProfitPlayer","chips_won","chips_adjusted","chips_due","isSettled","sLostPlayer","chips_lost","sPlayerChipsBorrowed","sPlayerChipsWon","sTotalChipsMissing","sExtraChips","sort","profitCompare","lossCompare","playerA","playerB","console","log","Alert","success","a","b","gameLocationChanged","event","target","value","startChipCountChanged","chipValueChanged","playerNameChanged","selectedPlayerChanged","deletePlayerChanged","playerFinalChipsChanged","playerFinalChips","Date","_this3","Player","map","react_default","createElement","TotalPlayerBuyins","finalPlayerInfo","_this2","className","type","onChange","href","data-toggle","data-target","aria-controls","aria-expanded","aria-label","react_s_alert_default","stack","effect","position","timeout","required","onClick","id","role","aria-selected","aria-labelledby","placeholder","aria-describedby","selected","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1f95686a.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\n\r\nimport Alert from 'react-s-alert';\r\nimport 'react-s-alert/dist/s-alert-default.css';\r\n\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      date: new Date(),\r\n      gameLocation: '',\r\n      startChipCount: 0,\r\n      chipValue: 0,\r\n      visibleSection: 'game-start',\r\n      newPlayerName: '',\r\n      deletePlayer:'',\r\n      players: [],\r\n      playersList: [],\r\n      selectedPlayer: '',\r\n      playerFinalChips: -1,\r\n      totalFinalChipsGiven: 0,\r\n      totalChipsTaken: 0\r\n    };\r\n\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    localStorage.clear();\r\n  }\r\n\r\n  editBuyin = (option) => {\r\n    let sPlayerSelected = this.state.selectedPlayer;\r\n    let sPlayers = this.state.players;\r\n    let sTotalInitialChipsTaken = parseInt(this.state.totalChipsTaken);\r\n\r\n    if(sPlayerSelected.length < 1) {\r\n      alert('Select a player');\r\n    }\r\n    else {\r\n      sPlayers.forEach(item => {\r\n        if(sPlayerSelected == item.player_name) {\r\n          if(option == 'remove') {\r\n            if(item.later_buyins > 0){\r\n              item.later_buyins = item.later_buyins - 1;\r\n            }          \r\n            sTotalInitialChipsTaken = sTotalInitialChipsTaken -  parseInt(this.state.startChipCount);\r\n          }\r\n          else {\r\n            item.later_buyins = item.later_buyins + 1;\r\n            sTotalInitialChipsTaken = sTotalInitialChipsTaken +  parseInt(this.state.startChipCount);\r\n          }\r\n          \r\n        }\r\n      });\r\n  \r\n      this.setState({players: sPlayers, totalChipsTaken: sTotalInitialChipsTaken});\r\n      localStorage.setItem('players', JSON.stringify(sPlayers));\r\n    }    \r\n\r\n  }\r\n\r\n\r\n  startNewGame = () => {\r\n    \r\n    const sGameLocation = this.state.gameLocation;\r\n    const sStartChipCount = parseInt(this.state.startChipCount);\r\n    const sChipValue = parseFloat(this.state.chipValue);\r\n\r\n    if(sGameLocation.length <= 0) {\r\n      alert(\"Please provide Game location\");\r\n    }\r\n    else if(sStartChipCount <= 0){\r\n      alert(\"Please provide start chip count greater than Zero.\");\r\n    }\r\n    else if(sChipValue <=0 ){\r\n      alert(\"Please provide Game Chip Value greater than Zero.\");\r\n    }\r\n    else {\r\n      let sGameDetails = {\r\n        gameLocation: sGameLocation,\r\n        date: this.state.date.toString(),\r\n        startChipCount: sStartChipCount,\r\n        chipValue: sChipValue\r\n      };\r\n  \r\n      this.setState({visibleSection: 'game-progress'});\r\n      localStorage.setItem('gameDetails', JSON.stringify(sGameDetails));\r\n    }    \r\n    \r\n  }\r\n\r\n  addNewPlayer = () => {\r\n    let sNewPlayerName = this.state.newPlayerName;\r\n    let sPlayers = this.state.players;\r\n    let sPlayersList = this.state.playersList;    \r\n    let sTotalInitialChipsTaken =  parseInt(this.state.totalChipsTaken);\r\n    let sPlayerInfo = {\r\n      player_name: sNewPlayerName,\r\n      initial_chips:  parseInt(this.state.startChipCount),\r\n      later_buyins: 0,\r\n      final_count: 0,\r\n      chipsWon: null\r\n    }\r\n\r\n    sTotalInitialChipsTaken = sTotalInitialChipsTaken +  parseInt(this.state.startChipCount);\r\n    if(sPlayersList.indexOf(sNewPlayerName) > -1) {\r\n      alert('Player already registered');\r\n    }\r\n    else {\r\n      if(sNewPlayerName.length < 1) {\r\n        alert('Player Name cannot be empty');\r\n      }\r\n      else {\r\n        sPlayersList.push(sNewPlayerName);\r\n        sPlayers.push(sPlayerInfo);      \r\n        \r\n        this.setState({players: sPlayers, playersList: sPlayersList, totalChipsTaken: sTotalInitialChipsTaken});\r\n        localStorage.setItem('players', JSON.stringify(sPlayers));\r\n      }\r\n    }    \r\n  }\r\n\r\n  deletePlayer = () => {\r\n    let sDeletePlayerName = this.state.deletePlayer;\r\n    let sPlayers = this.state.players;\r\n    let sPlayersList = this.state.playersList;\r\n    let sTotalInitialChipsTaken =  parseInt(this.state.totalChipsTaken);\r\n\r\n    if(sDeletePlayerName.length < 1) {\r\n      alert(\"Select a player to remove.\");\r\n    }\r\n    else {\r\n      for(var i=0; i<sPlayers.length; i++) {\r\n        if(sDeletePlayerName == sPlayers[i].player_name) {\r\n          sTotalInitialChipsTaken = sTotalInitialChipsTaken - (sPlayers[i].initial_chips + (sPlayers[i].later_buyins * parseInt(this.state.startChipCount)));\r\n          sPlayers.splice(i,1);\r\n        }\r\n      }\r\n      \r\n      const sPlayersListFiltered = sPlayersList.filter(item => item !== sDeletePlayerName);\r\n  \r\n      this.setState({players: sPlayers, playersList: sPlayersListFiltered, totalChipsTaken: sTotalInitialChipsTaken});\r\n  \r\n      localStorage.setItem('players', JSON.stringify(sPlayers));\r\n    }\r\n  }\r\n\r\n  calculatePayouts = () => {\r\n\r\n    let profitClub = [];\r\n    let loosersClub = [];\r\n    let stotalFinalChipsGiven = parseInt(this.state.totalFinalChipsGiven);\r\n    let sPlayers = this.state.players;\r\n\r\n    sPlayers.forEach(player => {\r\n      let sProfitPlayer= {\r\n        player_name: null,\r\n        chips_won: 0,\r\n        chips_adjusted:0,\r\n        chips_due:0,\r\n        isSettled: false\r\n      };\r\n      let sLostPlayer= {\r\n        player_name: null,\r\n        chips_lost: 0,\r\n        chips_adjusted:0,\r\n        chips_due:0,\r\n        isSettled: false\r\n      };\r\n      stotalFinalChipsGiven =  stotalFinalChipsGiven + parseInt(player.final_count);\r\n      const sPlayerChipsBorrowed = parseInt(player.initial_chips) + (parseInt(this.state.startChipCount) * parseInt(player.later_buyins));\r\n      const sPlayerChipsWon = parseInt(player.final_count);\r\n\r\n      player.chipsWon =  sPlayerChipsWon - sPlayerChipsBorrowed;\r\n\r\n      if(player.chipsWon >= 0) {\r\n        sProfitPlayer.player_name = player.player_name;\r\n        sProfitPlayer.chips_won = parseInt(player.chipsWon);\r\n        profitClub.push(sProfitPlayer);\r\n      }\r\n      else {\r\n        sLostPlayer.player_name = player.player_name;\r\n        sLostPlayer.chips_lost = (parseInt(player.chipsWon) * -1);\r\n        loosersClub.push(sLostPlayer);\r\n      }\r\n\r\n\r\n    });\r\n  \r\n    localStorage.setItem('players', JSON.stringify(sPlayers));\r\n\r\n    if(parseInt(this.state.totalChipsTaken) != parseInt(stotalFinalChipsGiven)) {\r\n      \r\n      if(parseInt(this.state.totalChipsTaken) > parseInt(stotalFinalChipsGiven)){\r\n        const sTotalChipsMissing = parseInt(this.state.totalChipsTaken) - parseInt(stotalFinalChipsGiven);\r\n        alert(sTotalChipsMissing + ' chips missing. please adjuist.');\r\n      }\r\n      else {\r\n        const sExtraChips = parseInt(stotalFinalChipsGiven) - parseInt(this.state.totalChipsTaken);\r\n        alert(sExtraChips + ' Chips extra. please adjust.');\r\n      }\r\n      \r\n\r\n\r\n    }\r\n    else {\r\n      alert(\"Chips count matched. Adjusting payments.\");\r\n\r\n      // Lets sort both profitClub and loosersClub in high to low order\r\n\r\n      profitClub.sort(this.profitCompare);\r\n      loosersClub.sort(this.lossCompare);\r\n\r\n      localStorage.setItem('profitClub', JSON.stringify(profitClub));\r\n      localStorage.setItem('loosersClub', JSON.stringify(loosersClub));\r\n\r\n      profitClub.forEach(playerA => {\r\n\r\n       // let sTempLoosersClub = this.adjustPayout(player, sTempLoosersClub);\r\n\r\n       loosersClub.forEach(playerB => {\r\n\r\n        if(parseInt(playerA.chips_won) > parseInt(playerB.chips_lost)) {\r\n\r\n          if((playerB.isSettled !== true) && (playerA.isSettled !== true)) {\r\n            playerA.chips_adjusted = playerB.chips_lost;\r\n          playerA.chips_due =  playerA.chips_won - playerB.chips_lost;\r\n\r\n          playerB.chips_adjusted = playerB.chips_lost;\r\n          playerB.chips_due = 0;\r\n\r\n          if((playerB.chips_lost * this.state.chipValue) > 0) {\r\n            console.log(playerB.player_name + ' pays ' + (playerB.chips_lost * this.state.chipValue) + ' to ' + playerA.player_name);\r\n            Alert.success(playerB.player_name + ' pays ' + (playerB.chips_lost * this.state.chipValue) + ' to ' + playerA.player_name);\r\n          }          \r\n\r\n          playerA.chips_won = playerA.chips_won - playerB.chips_lost;\r\n          playerB.chips_lost = 0;\r\n          playerB.isSettled = true;\r\n          }          \r\n        }\r\n        else if(parseInt(playerA.chips_won) === parseInt(playerB.chips_lost)){\r\n\r\n          if((playerB.isSettled !== true) && (playerA.isSettled !== true)) {\r\n            playerA.chips_adjusted = playerB.chips_lost;\r\n            playerA.chips_due = 0;\r\n  \r\n            playerB.chips_adjusted = playerB.chips_lost;\r\n            playerB.chips_due = 0;\r\n  \r\n            if((playerB.chips_lost * this.state.chipValue) > 0){\r\n              console.log(playerB.player_name + ' pays ' + (playerB.chips_lost * this.state.chipValue) + ' to ' + playerA.player_name); \r\n              Alert.success(playerB.player_name + ' pays ' + (playerB.chips_lost * this.state.chipValue) + ' to ' + playerA.player_name);\r\n            }\r\n            \r\n            playerA.chips_won = 0;\r\n            playerB.chips_lost = 0;   \r\n            playerB.isSettled = true;\r\n            playerA.isSettled = true;\r\n          }                \r\n        }\r\n        else{\r\n          if((playerB.isSettled !== true) && (playerA.isSettled !== true)) {\r\n            playerA.chips_adjusted = playerA.chips_won;\r\n            playerA.chips_due = 0;\r\n\r\n            playerB.chips_adjusted = playerA.chips_won;\r\n            playerB.chips_due = playerB.chips_lost - playerA.chips_won;\r\n\r\n            if((playerA.chips_won * this.state.chipValue) > 0) {\r\n              console.log(playerB.player_name + ' pays ' + (playerA.chips_won * this.state.chipValue) + ' to ' + playerA.player_name);\r\n              Alert.success(playerB.player_name + ' pays ' + (playerA.chips_won * this.state.chipValue) + ' to ' + playerA.player_name);\r\n            }\r\n            \r\n            playerB.chips_lost = playerB.chips_lost - playerA.chips_won;    \r\n            playerA.chips_won = 0;      \r\n            playerA.isSettled = true;\r\n          }          \r\n        }\r\n       });\r\n\r\n        \r\n      })\r\n\r\n    }\r\n\r\n  }\r\n\r\n\r\n  profitCompare =(a, b) => {\r\n    // Use toUpperCase() to ignore character casing\r\n    const playerA = parseInt(a.chips_won);\r\n    const playerB = parseInt(b.chips_won);\r\n  \r\n    let comparison = 0;\r\n    if (playerA < playerB) {\r\n      comparison = 1;\r\n    } else {\r\n      comparison = -1;\r\n    }\r\n    return comparison;\r\n  }\r\n\r\n  lossCompare =(a, b) => {\r\n    // Use toUpperCase() to ignore character casing\r\n    const playerA = parseInt(a.chips_lost);\r\n    const playerB = parseInt(b.chips_lost);\r\n  \r\n    let comparison = 0;\r\n    if (playerA < playerB) {\r\n      comparison = 1;\r\n    } else {\r\n      comparison = -1;\r\n    }\r\n    return comparison;\r\n  }\r\n\r\n\r\n  gameLocationChanged = (event) => {\r\n    this.setState({gameLocation: event.target.value});\r\n  }\r\n\r\n  startChipCountChanged = (event) => {\r\n    this.setState({startChipCount: event.target.value});\r\n  }\r\n\r\n  chipValueChanged = (event) => {\r\n    this.setState({chipValue: event.target.value});\r\n  }\r\n  \r\n  playerNameChanged = (event) => {\r\n    this.setState({newPlayerName: event.target.value});\r\n  }\r\n\r\n  selectedPlayerChanged = (event) => {\r\n    this.setState({selectedPlayer: event.target.value});\r\n  }\r\n\r\n  deletePlayerChanged = (event) => {\r\n    this.setState({deletePlayer: event.target.value});\r\n  }\r\n\r\n  playerFinalChipsChanged = (player , event) => {\r\n    let sPlayers = this.state.players;\r\n    //let stotalFinalChipsGiven = parseInt(this.state.totalFinalChipsGiven);\r\n    this.setState({playerFinalChips: event.target.value}, () => {\r\n      sPlayers.forEach(item => {\r\n        if(player == item.player_name) {\r\n          item.final_count = parseInt(this.state.playerFinalChips);          \r\n        }\r\n      });\r\n      //stotalFinalChipsGiven = stotalFinalChipsGiven + parseInt(this.state.playerFinalChips);\r\n      this.setState({players: sPlayers});\r\n      localStorage.setItem('players', JSON.stringify(sPlayers));\r\n    });    \r\n\r\n   \r\n  }\r\n\r\n\r\n  render() {\r\n\r\n    const Player = this.state.playersList.map(function(player) {\r\n      return <li>{player}</li>;\r\n    });\r\n\r\n    const deletePlayer = this.state.playersList.map(function(player) {\r\n      return <option>{player}</option>;\r\n    });\r\n\r\n    const TotalPlayerBuyins = this.state.players.map(function(player) {\r\n      return <li> {player.player_name} : {player.later_buyins} </li>;\r\n    });\r\n\r\n    const finalPlayerInfo = this.state.players.map(function(player) {\r\n      return <div className=\"input-group\">\r\n              <div className=\"input-group-prepend\">\r\n                <span className=\"input-group-text\">Enter {player.player_name} chips</span>\r\n              </div>\r\n              <input type=\"text\" className=\"form-control\"  onChange={(event)=> this.playerFinalChipsChanged(player.player_name, event)} />\r\n            </div>;\r\n    }, this);\r\n\r\n    return (\r\n      <div className=\"App\">\r\n\r\n      <nav className=\"navbar navbar-expand-lg navbar-dark bg-primary sticky-top \">\r\n        <a className=\"navbar-brand\" href=\"#\">Poker Payouts Calculator</a>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        {/*<div className=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n          <ul className=\"navbar-nav\">\r\n            <li className=\"nav-item active\">\r\n              <a className=\"nav-link\" href=\"#\">Home <span class=\"sr-only\">(current)</span></a>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link\" href=\"#\">Features</a>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link\" href=\"#\">Pricing</a>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link disabled\" href=\"#\" tabindex=\"-1\" aria-disabled=\"true\">Disabled</a>\r\n            </li>\r\n          </ul>\r\n        </div>*/}\r\n      </nav>\r\n      <div className=\"container-fluid\">\r\n        <Alert stack={true}  effect='stackslide' position='top' timeout='none'/>\r\n        {/* Home screen for starting game */}\r\n        \r\n        <div className={'row game-section game-start-section ' + (this.state.visibleSection == 'game-start' ? '' : 'd-none')}>\r\n          <div className=\"col-12\">\r\n            <div className=\"input-group\">\r\n              <div className=\"input-group-prepend\">\r\n                <span className=\"input-group-text\" >Enter Game location</span>\r\n              </div>\r\n              <input type=\"text\" className=\"form-control\" value={this.state.gameLocation} onChange={this.gameLocationChanged} required/>\r\n            </div>\r\n            <div className=\"input-group\">\r\n              <div className=\"input-group-prepend\">\r\n                <span className=\"input-group-text\">Start Chip count</span>\r\n              </div>\r\n              <input type=\"text\" className=\"form-control\" value={this.state.startChipCount} onChange={this.startChipCountChanged} />\r\n            </div>\r\n\r\n            <div className=\"input-group\">\r\n              <div className=\"input-group-prepend\">\r\n                <span className=\"input-group-text\">Game Chip value</span>\r\n              </div>\r\n              <input type=\"text\" className=\"form-control\" value={this.state.chipValue} onChange={this.chipValueChanged} />\r\n            </div>\r\n\r\n            <div>\r\n              <span>Game Date: </span> <span>{this.state.date.toString()}</span>\r\n            </div>\r\n\r\n            <button type=\"button\" className=\"btn btn-primary\" onClick={this.startNewGame}> Start Game</button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* End of Home section */}\r\n\r\n        {/* Game Started section */}\r\n        <div className={'row game-section game-progress-section ' + (this.state.visibleSection == 'game-progress' ? '' : 'd-none')}>\r\n          \r\n          <div className=\"col-12 \">\r\n\r\n            <ul className=\"nav nav-tabs\" id=\"pills-tab\" role=\"tablist\">\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link active\" id=\"pills-manage-players-tab\" data-toggle=\"pill\" href=\"#pills-manage-players\" role=\"tab\" aria-controls=\"pills-manage-players\" aria-selected=\"true\">Players</a>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link\" id=\"pills-manage-buyins-tab\" data-toggle=\"pill\" href=\"#pills-manage-buyins\" role=\"tab\" aria-controls=\"pills-manage-buyins\" aria-selected=\"false\">Buyins</a>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link\" id=\"pills-payouts-tab\" data-toggle=\"pill\" href=\"#pills-payouts\" role=\"tab\" aria-controls=\"pills-payouts\" aria-selected=\"false\">Payouts</a>\r\n              </li>\r\n            </ul>\r\n\r\n            <div className=\"tab-content\" id=\"pills-tabContent\">\r\n              <div className=\"tab-pane fade show active\" id=\"pills-manage-players\" role=\"tabpanel\" aria-labelledby=\"pills-manage-players-tab\">\r\n                                  \r\n                <div className=\"row\">                  \r\n                  <div className=\"col-12\">\r\n\r\n                    <div className=\"input-group\">\r\n                      <input type=\"text\" className=\"form-control\" value={this.state.newPlayerName} onChange={this.playerNameChanged} placeholder=\"Enter player name\" aria-label=\"Player name\" aria-describedby=\"button-addon2\" />\r\n                      <div className=\"input-group-append\">\r\n                        <button className=\"btn btn-primary\" type=\"button\" id=\"button-addon2\" onClick={this.addNewPlayer}>Add Player</button>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"input-group\">\r\n                      <select className=\"custom-select\" aria-label=\"Delete player\" value={this.state.deletePlayer} onChange={this.deletePlayerChanged}>\r\n                        <option selected>Choose Player...</option>\r\n                        {deletePlayer}\r\n                      </select>\r\n                      <div className=\"input-group-append\">\r\n                        <button className=\"btn btn-danger\" type=\"button\" onClick={this.deletePlayer} >Delete Player</button>\r\n                      </div>\r\n                    </div>\r\n\r\n                  </div>\r\n\r\n                  <div className='col-12'>\r\n                      <h3>Players list</h3>\r\n                      <ol>{Player}</ol>              \r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n\r\n              <div className=\"tab-pane fade\" id=\"pills-manage-buyins\" role=\"tabpanel\" aria-labelledby=\"pills-manage-buyins-tab\">\r\n                \r\n                <div className=\"col-12\">\r\n                  <div className=\"input-group\">\r\n                    <select className=\"custom-select\" aria-label=\"Manage Buyin\" value={this.state.selectedPlayer} onChange={this.selectedPlayerChanged}>\r\n                      <option selected>Choose player...</option>\r\n                      {deletePlayer}\r\n                    </select>\r\n                    <div className=\"input-group-append\" id=\"button-addon3\">\r\n                      <button className=\"btn btn-primary\" type=\"button\" onClick={() => this.editBuyin('add')} ></button>\r\n                      <button className=\"btn btn-danger\" type=\"button\" onClick={() => this.editBuyin('remove')}></button>\r\n                    </div>                  \r\n                  </div>\r\n                </div>\r\n\r\n                <div className='col-12'>\r\n                  <h3>Buyins count of each player</h3>\r\n                  <ul>{TotalPlayerBuyins}</ul>              \r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"tab-pane fade\" id=\"pills-payouts\" role=\"tabpanel\" aria-labelledby=\"pills-payouts-tab\">\r\n                {finalPlayerInfo}\r\n\r\n                <button className=\"btn btn-primary\" onClick={this.calculatePayouts}>Calculate</button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n\r\n        </div>\r\n\r\n      </div>\r\n      \r\n      </div>  \r\n    );\r\n  }\r\n\r\n\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport $ from 'jquery';\r\nimport Popper from 'popper.js';\r\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\r\nimport './index.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}